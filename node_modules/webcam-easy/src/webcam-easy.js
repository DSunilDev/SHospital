class Webcam {
  constructor(webcamElement, facingMode = 'user', canvasElement = null, snapSoundElement = null) {
    // Check if webcamElement is defined
    if (!webcamElement) {
      throw new Error('Webcam element is missing.');
    }

    this._webcamElement = webcamElement;
    this._webcamElement.width = this._webcamElement.width || 640;
    this._webcamElement.height = this._webcamElement.height || 360;
    this._facingMode = facingMode;
    this._webcamList = [];
    this._streamList = [];
    this._selectedDeviceId = '';
    this._canvasElement = canvasElement;

    // Check if canvasElement is defined
    if (this._canvasElement) {
      this._canvasElement.width = this._canvasElement.width || this._webcamElement.width;
      this._canvasElement.height = this._canvasElement.height || this._webcamElement.height;
    }

    this._snapSoundElement = snapSoundElement;
  }

  // ... rest of the class remains unchanged

  /* Start streaming webcam to video element */
  async stream() {
    return new Promise((resolve, reject) => {
      navigator.mediaDevices.getUserMedia(this.getMediaConstraints())
        .then(stream => {
          this._streamList.push(stream);
          this._webcamElement.srcObject = stream;
          if (this._facingMode == 'user') {
            this._webcamElement.style.transform = "scale(-1,1)";
          }
          this._webcamElement.play();
          resolve(this._facingMode);
        })
        .catch(error => {
          // Add console log for debugging
          console.error('Error starting stream:', error);
          reject(error);
        });
    });
  }

  // ... rest of the class remains unchanged

  snap() {
    if (this._canvasElement != null) {
      if (this._snapSoundElement != null) {
        this._snapSoundElement.play();
      }
      let context = this._canvasElement.getContext('2d');
      if (this._facingMode == 'user') {
        context.translate(this._canvasElement.width, 0);
        context.scale(-1, 1);
      }
      context.clearRect(0, 0, this._canvasElement.width, this._canvasElement.height);
      context.drawImage(this._webcamElement, 0, 0, this._canvasElement.width, this._canvasElement.height);
      let data = this._canvasElement.toDataURL('image/png');
      return data;
    } else {
      throw new Error("Canvas element is missing");
    }
  }
}

module.exports = Webcam;
